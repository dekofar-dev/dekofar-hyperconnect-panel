using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Bogus;
using Dekofar.HyperConnect.Domain.Entities;
using Dekofar.HyperConnect.Infrastructure.Persistence;
using DomainOrder = Dekofar.HyperConnect.Domain.Entities.Order;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace Dekofar.HyperConnect.Infrastructure.Seeders
{
    /// <summary>
    /// Seeds the database with large amounts of dummy data for demos and QA.
    /// Data generated by this seeder should never be used in production.
    /// </summary>
    public static class TestDataSeeder
    {
        private const string TestEmailDomain = "seeded.test";

        /// <summary>
        /// Generates test data. The seeder checks for existing records using a marker
        /// email domain so it only runs once unless <paramref name="force"/> is true.
        /// </summary>
        public static async Task SeedAsync(IServiceProvider services, bool force = false)
        {
            using var scope = services.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole<Guid>>>();

            if (!force && await context.Users.AnyAsync(u => u.Email.EndsWith(TestEmailDomain)))
            {
                // Test data already exists
                return;
            }

            var faker = new Faker("en");

            // Ensure required roles exist
            var requiredRoles = new[] { "Admin", "Support", "Sales", "Customer" };
            foreach (var roleName in requiredRoles)
            {
                if (!await roleManager.RoleExistsAsync(roleName))
                {
                    await roleManager.CreateAsync(new IdentityRole<Guid>(roleName));
                }
            }

            var admins = new List<ApplicationUser>();
            var supports = new List<ApplicationUser>();
            var salesAgents = new List<ApplicationUser>();
            var customers = new List<ApplicationUser>();

            // Helper local function to create users
            async Task<ApplicationUser> CreateUserAsync(string role, string emailPrefix)
            {
                var user = new ApplicationUser
                {
                    Id = Guid.NewGuid(),
                    UserName = $"{emailPrefix}@{TestEmailDomain}",
                    Email = $"{emailPrefix}@{TestEmailDomain}",
                    FullName = faker.Name.FullName(),
                    AvatarUrl = faker.Internet.Avatar(),
                    MembershipDate = faker.Date.PastOffset(1).UtcDateTime,
                    IsOnline = false,
                    LastSeen = faker.Date.RecentOffset(7).UtcDateTime
                };

                // Optional PIN support
                var pin = faker.Random.Int(1000, 9999).ToString();
                user.HashedPin = userManager.PasswordHasher.HashPassword(user, pin);
                user.PinLastUpdatedAt = DateTime.UtcNow;

                await userManager.CreateAsync(user, "Password123!");
                await userManager.AddToRoleAsync(user, role);
                return user;
            }

            // Seed 3 admins
            for (int i = 1; i <= 3; i++)
                admins.Add(await CreateUserAsync("Admin", $"admin{i}"));

            // Seed 5 support staff
            for (int i = 1; i <= 5; i++)
                supports.Add(await CreateUserAsync("Support", $"support{i}"));

            // Seed 10 sales agents
            for (int i = 1; i <= 10; i++)
                salesAgents.Add(await CreateUserAsync("Sales", $"sales{i}"));

            // Seed 30 customers
            for (int i = 1; i <= 30; i++)
                customers.Add(await CreateUserAsync("Customer", $"customer{i}"));

            await context.SaveChangesAsync();

            var allUsers = admins.Concat(supports).Concat(salesAgents).Concat(customers).ToList();

            // ----- Messages -----
            var messages = new List<UserMessage>();
            for (int i = 0; i < 100; i++)
            {
                var sender = faker.PickRandom(allUsers);
                ApplicationUser receiver;
                do
                {
                    receiver = faker.PickRandom(allUsers);
                } while (receiver.Id == sender.Id);

                var sentAt = faker.Date.RecentOffset(30).UtcDateTime;
                var isRead = faker.Random.Bool(0.7f);
                var msg = new UserMessage
                {
                    Id = Guid.NewGuid(),
                    SenderId = sender.Id,
                    ReceiverId = receiver.Id,
                    Text = faker.Lorem.Sentence(),
                    SentAt = sentAt,
                    IsRead = isRead,
                    ReadAt = isRead ? sentAt.AddMinutes(faker.Random.Int(1, 120)) : null
                };

                if (faker.Random.Bool(0.2f))
                {
                    msg.FileUrl = faker.Internet.Url();
                    msg.FileType = faker.System.CommonFileType();
                    msg.FileSize = faker.Random.Long(1000, 5000000);
                }

                messages.Add(msg);
            }
            context.UserMessages.AddRange(messages);

            foreach (var user in allUsers)
            {
                user.UnreadMessageCount = messages.Count(m => m.ReceiverId == user.Id && !m.IsRead);
                var lastMsg = messages
                    .Where(m => m.SenderId == user.Id || m.ReceiverId == user.Id)
                    .OrderByDescending(m => m.SentAt)
                    .FirstOrDefault();
                user.LastMessageDate = lastMsg?.SentAt;
            }
            context.Users.UpdateRange(allUsers);

            // ----- Support Tickets -----
            var categories = await context.SupportCategories.ToListAsync();
            if (categories.Count < 3)
            {
                for (int i = categories.Count; i < 3; i++)
                {
                    var cat = new SupportCategory
                    {
                        Id = Guid.NewGuid(),
                        Name = faker.Commerce.Categories(1).First(),
                        Description = faker.Lorem.Sentence(),
                        CreatedAt = DateTime.UtcNow
                    };
                    categories.Add(cat);
                    context.SupportCategories.Add(cat);
                }
                await context.SaveChangesAsync();
            }

            var tickets = new List<SupportTicket>();
            var ticketReplies = new List<SupportTicketReply>();
            for (int i = 0; i < 20; i++)
            {
                var owner = faker.PickRandom(customers);
                var category = faker.PickRandom(categories);
                var created = faker.Date.RecentOffset(60).UtcDateTime;
                var status = faker.PickRandom<SupportTicketStatus>();

                var ticket = new SupportTicket
                {
                    Id = Guid.NewGuid(),
                    Title = faker.Lorem.Sentence(6),
                    Description = faker.Lorem.Paragraph(),
                    CreatedByUserId = owner.Id,
                    AssignedUserId = faker.Random.Bool() ? faker.PickRandom(supports).Id : null,
                    CategoryId = category.Id,
                    Status = status,
                    Priority = faker.PickRandom<SupportTicketPriority>(),
                    CreatedAt = created,
                    LastUpdatedAt = created,
                    UnreadReplyCount = 0
                };

                int replyCount = faker.Random.Int(0, 3);
                for (int r = 0; r < replyCount; r++)
                {
                    var isOwnerReply = faker.Random.Bool();
                    var replyUser = isOwnerReply ? owner : faker.PickRandom(supports);
                    var replyCreated = ticket.LastUpdatedAt.AddMinutes(faker.Random.Int(10, 600));
                    ticket.LastUpdatedAt = replyCreated;
                    if (!isOwnerReply && ticket.CreatedByUserId == owner.Id)
                    {
                        ticket.UnreadReplyCount++;
                    }
                    ticketReplies.Add(new SupportTicketReply
                    {
                        Id = Guid.NewGuid(),
                        TicketId = ticket.Id,
                        UserId = replyUser.Id,
                        Message = faker.Lorem.Sentence(),
                        CreatedAt = replyCreated
                    });
                }

                tickets.Add(ticket);
            }
            context.SupportTickets.AddRange(tickets);
            context.SupportTicketReplies.AddRange(ticketReplies);

            // ----- Orders & Commissions -----
            var orders = new List<DomainOrder>();
            var commissions = new List<Commission>();
            var agentOrderCount = salesAgents.ToDictionary(a => a.Id, _ => 0);

            // ensure each agent has at least 1 order
            foreach (var agent in salesAgents)
            {
                CreateOrderForAgent(agent);
            }

            int remaining = 50 - orders.Count;
            while (remaining > 0)
            {
                var agent = faker.PickRandom(salesAgents);
                if (agentOrderCount[agent.Id] >= 5)
                    continue;
                CreateOrderForAgent(agent);
                remaining--;
            }

            void CreateOrderForAgent(ApplicationUser agent)
            {
                var customer = faker.PickRandom(customers);
                var createdAt = faker.Date.RecentOffset(90).UtcDateTime;
                var order = new DomainOrder
                {
                    Id = Guid.NewGuid(),
                    SellerId = agent.Id,
                    CustomerId = customer.Id,
                    CreatedAt = createdAt,
                    TotalAmount = faker.Finance.Amount(20, 2000),
                    Status = faker.PickRandom<OrderStatus>()
                };
                orders.Add(order);
                agentOrderCount[agent.Id]++;

                var commission = new Commission
                {
                    Id = Guid.NewGuid(),
                    UserId = agent.Id,
                    OrderId = order.Id,
                    Amount = Math.Round(order.TotalAmount * faker.Random.Decimal(0.05m, 0.15m), 2),
                    CreatedAt = createdAt,
                    Description = $"Commission for order {order.Id}"
                };
                commissions.Add(commission);
            }

            context.Orders.AddRange(orders);
            context.Commissions.AddRange(commissions);

            // update sales agent aggregates
            foreach (var agent in salesAgents)
            {
                agent.TotalSalesCount += orders.Count(o => o.SellerId == agent.Id);
                agent.TotalCommissionAmount += commissions.Where(c => c.UserId == agent.Id).Sum(c => c.Amount);
            }
            context.Users.UpdateRange(salesAgents);

            await context.SaveChangesAsync();
        }
    }
}
